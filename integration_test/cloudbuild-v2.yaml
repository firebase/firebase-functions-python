# Cloud Build configuration for Firebase Functions V2 Integration Tests (Python)
# Runs V2 test suites on functions-integration-tests-v2 project
# Following the same pattern as JS SDK for reliability

# NOTE: This config is ready but will fail until v2 templates are created.
# Currently no v2 templates exist in templates/functions/src/v2/
# To enable v2 testing, create the necessary .py.hbs templates.

options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

timeout: '3600s'

substitutions:
  _PROJECT_ID: 'functions-integration-tests-v2'  # V2 project

steps:
  # Create storage bucket for test results if it doesn't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:stable'
    id: 'create-bucket'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Create bucket for test results if it doesn't exist
        BUCKET_NAME="gs://${_PROJECT_ID}-test-results"
        echo "Checking if bucket $$BUCKET_NAME exists..."
        if ! gsutil ls "$$BUCKET_NAME" &>/dev/null; then
          echo "Creating bucket $$BUCKET_NAME..."
          gsutil mb -p "${_PROJECT_ID}" "$$BUCKET_NAME"
        else
          echo "Bucket $$BUCKET_NAME already exists"
        fi

  # Step 1: Build Python SDK wheel
  # NOTE: Build is now submitted from repo root, so /workspace = repo root
  - name: 'python:3.11'
    id: 'build-python-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Install uv for Python package management
        echo "Installing uv..."
        pip install uv

        # Verify we're in the repo root
        echo "Current directory: $(pwd)"
        ls -la pyproject.toml

        # Build the firebase-functions Python SDK from source
        echo "Building firebase-functions Python SDK from source..."
        uv build

        # Copy the wheel to integration_test directory (preserve original filename)
        echo "Copying wheel to integration_test directory..."
        cp dist/*.whl integration_test/

        # Verify the wheel was copied and show actual filename
        echo "Checking if wheel exists..."
        WHEEL_FILE=$$(ls integration_test/*.whl 2>/dev/null | head -n 1)
        if [ -n "$$WHEEL_FILE" ]; then
          ls -lh "$$WHEEL_FILE"
          echo "✅ Wheel exists at: $$WHEEL_FILE"
        else
          echo "❌ ERROR: No wheel file found in integration_test/"
          ls -la integration_test/ || echo "integration_test directory doesn't exist"
          exit 1
        fi

        echo "Python SDK built and packaged successfully"

  # Step 2: Run V2 integration tests using unified test runner
  # NOTE: This will fail until v2 templates are created
  - name: 'node:20'
    id: 'run-v2-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e  # Exit on error

        # Install Python 3.11, gcloud, and other dependencies in node:20 image
        echo "Installing Python 3.11 and gcloud..."
        apt-get update -qq
        apt-get install -y -qq python3.11 python3.11-venv python3-pip curl apt-transport-https ca-certificates gnupg

        # Install gcloud SDK
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        apt-get update -qq && apt-get install -y -qq google-cloud-sdk

        # Verify installations
        python3.11 --version
        gcloud --version

        # Change to integration_test directory
        # NOTE: /workspace is now repo root, so cd into integration_test
        cd integration_test

        # Debug: Check current directory and contents
        echo "Current directory: $(pwd)"
        ls -la

        # Install Node.js test dependencies
        echo "Installing Node.js dependencies..."
        npm ci

        # Install firebase-tools globally
        echo "Installing Firebase CLI..."
        npm install -g firebase-tools

        # Verify tools are installed
        firebase --version
        node --version

        # Create logs directory
        mkdir -p logs

        # Set project ID for V2 tests
        export PROJECT_ID=${_PROJECT_ID}
        echo "Running V2 tests on project: ${PROJECT_ID}"

        # Use unified test runner (handles generate, deploy, test, cleanup automatically)
        # NOTE: This will fail until v2 templates are created in templates/functions/src/v2/
        # For now, this serves as a template for future v2 testing
        echo "⚠️  WARNING: No v2 templates exist yet. This build will fail."
        echo "To enable v2 testing, create template files in templates/functions/src/v2/"

        # Uncomment when v2 templates are ready:
        # node scripts/run-tests.js \
        #   --sequential \
        #   v2_firestore \
        #   --use-published-sdk=file:firebase-functions-python-local.whl

        # For now, just exit successfully to show the build pipeline works
        echo "✅ V2 build pipeline configured. Ready for v2 templates."

# Artifacts to store
# NOTE: Paths are relative to /workspace which is now repo root
artifacts:
  objects:
    location: 'gs://${_PROJECT_ID}-test-results/${BUILD_ID}'
    paths:
      - 'integration_test/logs/*.log'
      - 'integration_test/generated/.metadata.json'